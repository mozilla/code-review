# -*- coding: utf-8 -*-
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Generated by Django 4.1.2 on 2022-12-07 16:59

from math import ceil

from django.db import migrations

ISSUES_INSERT_SIZE = 5000


def generate_issue_links(apps, schema_editor):
    """Generate the IssueLink M2M table from issues' FK to the diff of a revision"""
    Issue = apps.get_model("issues", "Issue")
    IssueLink = apps.get_model("issues", "IssueLink")
    qs = (
        # This ensures we do not handle newly created issues
        # during the migration so the order is preserved
        Issue.objects.filter(old_diff__isnull=False)
        .order_by("created", "id")
        .values("id", "old_diff_id", "old_diff__revision_id")
    )

    issues_count = qs.count()
    slices = ceil(issues_count / ISSUES_INSERT_SIZE)

    for index in range(0, slices):
        print(
            f"[{index + 1}/{slices}] Initializing Issues references on the M2M table."
        )
        issues = qs[index * ISSUES_INSERT_SIZE : (index + 1) * ISSUES_INSERT_SIZE]
        IssueLink.objects.bulk_create(
            (
                IssueLink(
                    issue_id=issue["id"],
                    diff_id=issue["old_diff_id"],
                    revision_id=issue["old_diff__revision_id"],
                )
                for issue in issues
            )
        )


class Migration(migrations.Migration):

    dependencies = [
        ("issues", "0006_issuelink_initial"),
    ]

    operations = [
        # Fill the M2M table
        migrations.RunPython(
            generate_issue_links,
            reverse_code=None,
            elidable=True,
        ),
        # Drop old FK
        migrations.RemoveField(
            model_name="issue",
            name="old_diff",
        ),
    ]
